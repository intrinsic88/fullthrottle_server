{"version":3,"sources":["Component/chart/chart.component.jsx","Component/userTable/usertable.component.jsx","Component/navbar/navbarcomponent.jsx","App.jsx","serviceWorker.js","index.js"],"names":["GraphComponent","props","margin","bottom","xType","xDomain","width","height","title","data","useStyles","makeStyles","theme","top_margin","marginTop","modal","display","alignItems","justifyContent","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","textField","marginLeft","marginRight","columns","field","graphData","start_date","moment","format","end_date","x","y","UserTable","classes","useState","rows","setrows","open","setOpen","userData","setUserData","allData","setallData","selectedDate","setSeletectedDate","checkforSelectData","map","element","utc","rowclickHandler","id","Axios","method","url","then","res","getUserData","handleOpen","useEffect","response","console","log","Container","className","Grid","container","item","xs","Card","CardContent","Typography","align","Table","TableHead","TableRow","value","index","TableCell","key","TableBody","row","component","scopr","onClick","name","timezone","Modal","aria-labelledby","aria-describedby","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","noValidate","TextField","label","type","defaultValue","onChange","e","target","InputLabelProps","shrink","root","flexGrow","menuButton","Navbar","AppBar","position","Toolbar","IconButton","edge","color","aria-label","variant","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.61942ee0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, VerticalBarSeries } from 'react-vis';\r\n\r\nconst GraphComponent = (props) => {\r\n\r\n    return(\r\n        <XYPlot margin={{bottom: 70}} xType=\"linear\" xDomain={[1, 24]} width={500} height={500}>\r\n        <VerticalGridLines />\r\n        <HorizontalGridLines />\r\n        <XAxis title='Time in Day'/>\r\n        <YAxis title='Hours (30Mins is 0.5 hours)'/>\r\n        <VerticalBarSeries\r\n          data={props.data}\r\n        />\r\n        </XYPlot>\r\n    )\r\n\r\n}\r\n\r\nexport default GraphComponent;\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container, TableHead, Table, TableRow, TableBody, TableCell, Modal, Fade, Backdrop, TextField, Grid, Card, CardContent, Typography } from '@material-ui/core';\r\nimport Axios from 'axios';\r\nimport GraphComponent from '../chart/chart.component';\r\nimport moment from 'moment';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    top_margin:{marginTop:'2%'},\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: 200,\r\n    },\r\n}));\r\n\r\nconst columns = [\r\n    { title: \"Name\", field: \"name\" },\r\n    { title: \"Time Zone \", field: \"time_zone\" }\r\n]\r\n\r\nconst graphData = {\r\n    start_date: moment().format('YYYY/MM/DD'),\r\n    end_date: moment().format('YYYY/MM/DD'),\r\n    data: [\r\n        { x: 1, y: 0 },\r\n        { x: 2, y: 0 },\r\n        { x: 3, y: 0 },\r\n        { x: 4, y: 0 },\r\n        { x: 5, y: 0 },\r\n        { x: 6, y: 0 },\r\n        { x: 7, y: 0 },\r\n        { x: 8, y: 0 },\r\n        { x: 9, y: 0 },\r\n        { x: 10, y: 0 },\r\n        { x: 11, y: 0 },\r\n        { x: 12, y: 0 },\r\n        { x: 13, y: 0 },\r\n        { x: 14, y: 0 },\r\n        { x: 15, y: 0 },\r\n        { x: 16, y: 0 },\r\n        { x: 17, y: 0 },\r\n        { x: 18, y: 0 },\r\n        { x: 20, y: 0 },\r\n        { x: 21, y: 0 },\r\n        { x: 22, y: 0 },\r\n        { x: 23, y: 0 },\r\n        { x: 24, y: 0 },\r\n    ]\r\n}\r\n\r\n\r\nconst UserTable = () => {\r\n    const classes = useStyles();\r\n    const [rows, setrows] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n    const [userData, setUserData] = useState(graphData);\r\n    const [allData, setallData] = useState([]);\r\n    const [selectedDate, setSeletectedDate] = useState(moment().format('YYYY/MM/DD'));\r\n\r\n    const getUsers = () => {\r\n        Axios({\r\n            method: 'GET',\r\n            url: \"/api/users\"\r\n        })\r\n            .then((response) => {\r\n                setrows(response.data)\r\n            })\r\n    }\r\n\r\n    const checkforSelectData = () => {\r\n        allData.map((element) => {\r\n            const start_date = moment(element.start_date).utc().format('YYYY-MM-DD');\r\n            if (selectedDate == start_date){\r\n                setUserData(element);\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    const getUserData = (id) => {\r\n        Axios({\r\n            method: 'GET',\r\n            url: '/api/users/' + id,\r\n        })\r\n            .then((res) => {\r\n                setallData(res.data);\r\n            }\r\n            ).then(() => {\r\n                checkforSelectData();\r\n            })\r\n    }\r\n\r\n    const dateChangeHandler = (e) => {\r\n        setSeletectedDate(e.target.value);\r\n    }\r\n\r\n    const rowclickHandler = (id) => {\r\n        getUserData(id)\r\n        handleOpen()\r\n    }\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getUsers()\r\n        return () => {\r\n            setrows([]);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        checkforSelectData()\r\n        console.log(\"inside\")\r\n    }, [selectedDate])\r\n\r\n    return (\r\n        <Container className={classes.top_margin}>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <Card>\r\n\r\n                        <CardContent>\r\n                        <Typography align='left'>User Details</Typography>\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        {\r\n                                            columns.map((value, index) => (\r\n                                                <TableCell key={index}>\r\n                                                    {value.title}\r\n                                                </TableCell>\r\n                                            ))\r\n                                        }\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {\r\n                                        rows.map((row) => (\r\n                                            <TableRow key={row.id}>\r\n                                                <TableCell component='td' scopr='row' onClick={() => rowclickHandler(row.id)}>\r\n                                                    {row.name}\r\n                                                </TableCell>\r\n                                                <TableCell component='td' scopr='row'>\r\n                                                    {row.timezone}\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        ))\r\n                                    }\r\n\r\n                                </TableBody>\r\n                            </Table>\r\n                        </CardContent>\r\n                    </Card>\r\n\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={open}\r\n                onClose={handleClose}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={open}>\r\n                    <div className={classes.paper}>\r\n                        <Grid container align='right'>\r\n                            <Grid item xs={12}>\r\n                                <form className={classes.container} noValidate>\r\n                                    <TextField\r\n                                        id=\"date\"\r\n                                        label=\"Active Date\"\r\n                                        type=\"date\"\r\n                                        defaultValue={selectedDate}\r\n                                        onChange={dateChangeHandler}\r\n                                        className={classes.textField}\r\n                                        InputLabelProps={{\r\n                                            shrink: true,\r\n                                        }}\r\n                                    />\r\n                                </form>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <GraphComponent {...userData} />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n\r\n        </Container>\r\n    )\r\n\r\n};\r\n\r\nexport default UserTable;","import React from 'react'\r\nimport { AppBar, Toolbar, IconButton, Typography, makeStyles } from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n  }));\r\n\r\nconst Navbar = () =>{\r\n    const classes = useStyles();\r\n    return(\r\n<AppBar position=\"static\">\r\n  <Toolbar>\r\n    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n      <MenuIcon  />\r\n    </IconButton>\r\n    <Typography variant=\"h6\" className={classes.title}>\r\n     FT Assignment\r\n    </Typography>\r\n  </Toolbar>\r\n</AppBar>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\nimport './App.css';\nimport UserTable from './Component/userTable/usertable.component';\nimport { Container } from '@material-ui/core';\nimport Navbar from './Component/navbar/navbarcomponent';\n\nfunction App() {\n    return ( \n    <div className = \"App\" >\n        <Navbar />\n        <Container>\n        <UserTable></UserTable>\n        </Container>\n    </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}